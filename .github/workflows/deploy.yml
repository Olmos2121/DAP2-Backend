# Nombre del pipeline
name: Deploy Backend to AWS EC2

# Disparador: Se ejecuta cada vez que hay un push a la rama 'main'
on:
  push:
    branches: [ "main" ]

# Variables de entorno para todo el pipeline
env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    # 1. Clona el código del repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configura las credenciales de AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 3. Inicia sesión en Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 4. Construye, etiqueta y sube la imagen de Docker a ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # 5. Despliega la nueva imagen en el servidor EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Define el nombre completo de la imagen en una variable para reusarla
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          
          # Inicia sesión en ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          
          # EscribE el contenido del secreto DOT_ENV en un archivo .env en el servidor
          echo "${{ secrets.DOT_ENV }}" > ~/backend/backend.env
          
          # Navega a la carpeta de la aplicación
          cd ~/backend
          
          # Trae la última imagen de ECR
          docker pull $IMAGE_NAME
          
          # --- Parte modificada: encontrar y eliminar contenedor por Puerto---
          # Busca el ID de CUALQUIER contenedor que esté usando el puerto 8080
          CONTAINER_ID=$(docker ps -q --filter "publish=8080")
          
          # Si se encontró un ID, detiene y elimina ese contenedor
          if [ -n "$CONTAINER_ID" ]; then
            echo "Deteniendo y eliminando contenedor ($CONTAINER_ID) que usa el puerto 8080..."
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
          else
            echo "Ningun contenedor encontrado usando el puerto 8080."
          fi
          # -----------------------------------------------------------
          
          # Ejecutar el nuevo contenedor
          echo "Ejecutando nuevo contenedor..."
          docker run -d -p 8080:8080 \
            --restart always \
            --env-file ./backend.env \
            $IMAGE_NAME
